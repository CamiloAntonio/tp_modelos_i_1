El problema ahora tiene relativamente muchos mas valores, con lo cual el tiempo es mayor, y el algoritmo usado previamente que llegaba a dar la solucion optima, ya no lo da.
El algoritmo usado previamente ahora da 755. Desconozco aun si es el optimo, pero intentaremos mejorarlo.
Como se lo habia dejado previamente, este algoritmo no ordenaba las prendas antes de proceder. Solo ordenando las prendas este algoritmo mejora para este problema, mejorando el tiempo dejandolo en 493. Se proseguira buscando mejorarlo.

La logica mediante la cual dise単e el algoritmo creeria que me lleva al optimo, pero evidentemente no lo logra. Aun no ubico el caso en el que el algoritmo que dise単e no toma la decision correcta y no va por el camino optimo. 
Es dificil descifrarlo con los valores del 2do problema, asi que probare viendo si logro ubicar el caso en el que falla con los datos del 1er problema.
Una ves que lo ubique, intentare mejorar el algoritmo actual para que tome la decision correcta.

Se descubre un posible caso donde el algoritmo actual no toma la decision correcta.
El algoritmo actual una vez ordenadas por tiempo decresciente las prendas, toma la mas cara, busca la mas cara de las prendas compatibles con esta primera y le agrega al lavado, y luego repite agarrando la mas cara de las prendas compatibles con el lavado actual.
El error que induce esto es que existe la posibilidad de que al tomar una prenda, se deje afuera otra prenda que no sea compatible con ninguna otra.
Ejemplo:
Se tienen las prendas A con peso 15, B con peso 15, C con peso 10, y D con peso 5.
A y B no son compatibles, B y D tampoco y C y D tampoco
El algoritmo podria empezar por la prenda A, luego tomar la C dado que es la compatible mas cara, pero dejaria la D afuera, y los lavados quedarian:
[A,C], [B], [D] con tiempo total 35
Cuando lo correcto seria tomar la D, y luego hacer un lavado con B y C obteniendo un resultado final:
[A,D], [B,C] con tiempo total 30.

Para evitar esto, lo que se deberia hacer es definir un lavado que minimize el tiempo total de lavados que se pueden hacer que las prendas que restan del lavado que se esta formando.
En principio se me ocurre un algoritmo recursivo que empieze de manera similar partiendo de una prenda y viendo sus prendas compatibles, pero defina que lavado formar "ranqueando" los lavados posibles mediante el mejor resultado que se puede obtener con las prendas restantes fuera del lavado.
Pareciera tratarse de fuerza bruta, aunque se le podria aplicar back tracking para recortar el orden.     

Dado que el orden del algoritmo que se piensa puede ser muy grande, se me ocurre dise単ar un algoritmo hibrido que use a cierta medida ambos procedimientos.
Esto seria, partir de una prenda, y primero definir todos los lavados que se podrian hacer con esa prenda, luego iterar esta lista de lavados, y darles un "score", esto es, el mejor resultado que se puede obtener de una solucion que incluye este lavado.
Para buscar la mejor solucion que incluye a cada lavado, se usa el algoritmo anterior. Se esta forma se busca que el algoritmo varie un poco las posibilidades, pero el orden crezca tanto.

El algoritmo propuesto arriba, si bien es de orden mucho menor a fuerza bruta, aun asi no es viable dado que con el tama単o del problema, no llega a dar una solucion en un tiempo viable.
Por ahora se permanece con el algoritmo original partiendo de las prendas ordenadas, dado que no se encuentra una forma de resolver el problema de este algoritmo (descripto parrafos arriba), sin aplicar un algoritmo cuyo orden sea tan grande.
Este algoritmo se encuentra en el modulo "resolvedor.py"

Se prueba una nueva alternativa. El procedimiento es equivalente al algoritmo original, con una leve diferencia, haciendo una "division" en la busqueda.
 - Se ordenan las prendas por roden de tiempos (nuevamente)
 - Se toman las 2 mas caras
 - Se forman 2 lavados nuevos que incluyen unicamente estas 2
 - Se recorren las prendas restantes, y se intenta poner la prenda actual primero en el lavado correspondiente a segunda prenda mas pesada, y de no ser posible, se intenta poner en el siguiente.
 - Una vez recorridas todas las prendas, de las prendas restantes se toman las 2 mas pesadas, y se reinicia el ciclo.

 Esto da un score de 352, mucho mas rapido que lo logrado previamente.
 El codigo de este algoritmo puede ser encontrado en el modulo "resolvedor3.py"